package com.huwei.sweetmusicplayer.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.huwei.sweetmusicplayer.models.MusicInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MUSIC_INFO.
*/
public class MusicInfoDao extends AbstractDao<MusicInfo, Long> {

    public static final String TABLENAME = "MUSIC_INFO";

    /**
     * Properties of entity MusicInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SongId = new Property(0, Long.class, "songId", true, "SONG_ID");
        public final static Property AlbumId = new Property(1, Long.class, "albumId", false, "ALBUM_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Artist = new Property(3, String.class, "artist", false, "ARTIST");
        public final static Property Duration = new Property(4, Integer.class, "duration", false, "DURATION");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
        public final static Property Favorite = new Property(6, Boolean.class, "favorite", false, "FAVORITE");
    };


    public MusicInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MusicInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MUSIC_INFO' (" + //
                "'SONG_ID' INTEGER PRIMARY KEY ," + // 0: songId
                "'ALBUM_ID' INTEGER," + // 1: albumId
                "'TITLE' TEXT," + // 2: title
                "'ARTIST' TEXT," + // 3: artist
                "'DURATION' INTEGER," + // 4: duration
                "'PATH' TEXT," + // 5: path
                "'FAVORITE' INTEGER);"); // 6: favorite
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MUSIC_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MusicInfo entity) {
        stmt.clearBindings();
 
        Long songId = entity.getSongId();
        if (songId != null) {
            stmt.bindLong(1, songId);
        }
 
        Long albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindLong(2, albumId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(4, artist);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(5, duration);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
 
        Boolean favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(7, favorite ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MusicInfo readEntity(Cursor cursor, int offset) {
        MusicInfo entity = new MusicInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // songId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // albumId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // artist
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // duration
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // path
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // favorite
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MusicInfo entity, int offset) {
        entity.setSongId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAlbumId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArtist(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDuration(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFavorite(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MusicInfo entity, long rowId) {
        entity.setSongId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MusicInfo entity) {
        if(entity != null) {
            return entity.getSongId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
